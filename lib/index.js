// Generated by CoffeeScript 1.8.0
(function() {
  var $, compile, mdast;

  mdast = require('mdast');

  $ = React.createElement;

  compile = function(node, key) {
    var child, dompurify, i, tag;
    if (key == null) {
      key = '';
    }
    switch (node.type) {
      case 'root':
        return $('div', {
          key: key + 'root'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'root' + i));
          }
          return _results;
        })());
      case 'text':
        return node.value;
      case 'strong':
        return $('strong', {
          key: key + 'strong'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'strong' + i));
          }
          return _results;
        })());
      case 'emphasis':
        return $('em', {
          key: key + 'emphasis'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'emphasis' + i));
          }
          return _results;
        })());
      case 'horizontalRule':
        return $('hr', {
          key: key + 'hr'
        });
      case 'break':
        return $('br', {
          key: key + 'break'
        });
      case 'inlineCode':
        return $('code', {
          key: key + 'inlineCode'
        }, node.value);
      case 'code':
        return $('code', {
          key: key + 'code'
        }, node.value);
      case 'heading':
        tag = 'h' + node.depth.toString();
        return $(tag, {
          key: key + tag
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + tag + i));
          }
          return _results;
        })());
      case 'paragraph':
        return $('p', {
          key: key + 'paragraph'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'paragraph' + i));
          }
          return _results;
        })());
      case 'list':
        tag = node.ordered ? 'ol' : 'ul';
        return $(tag, {
          key: key + 'list'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + tag + i));
          }
          return _results;
        })());
      case 'link':
        return $('a', {
          key: key + 'link',
          href: node.href,
          title: node.title
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'link' + i));
          }
          return _results;
        })());
      case 'image':
        return $('img', {
          key: key + 'image',
          src: node.src,
          title: node.title,
          alt: node.alt
        });
      case 'blockquote':
        return $('blockquote', {
          key: key + 'bq'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'bq' + i));
          }
          return _results;
        })());
      case 'table':
        return $('table', {
          key: key + 'table'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'table' + i));
          }
          return _results;
        })());
      case 'tableHeader':
        return $('tr', {
          key: key + 'tableHeader'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push($('th', {
              key: key + 'tr-th'
            }, compile(child, key + 'tableHeader' + i)));
          }
          return _results;
        })());
      case 'tableRow':
        return $('tr', {
          key: key + 'tableRow'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push($('td', {
              key: key + 'td-th'
            }, compile(child, key + 'tableRow' + i)));
          }
          return _results;
        })());
      case 'tableCell':
        return $('span', {
          key: key + 'tableCell'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'tableCell' + i));
          }
          return _results;
        })());
      case 'listItem':
        return $('li', {
          key: key + 'li'
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, key + 'li' + i));
          }
          return _results;
        })());
      case 'html':
        if ((typeof document !== "undefined" && document !== null) && sanitize) {
          dompurify = require('dompurify');
          return $('div', {
            key: key + 'html',
            dangerouslySetInnerHTML: {
              __html: dompurify.sanitize(node.value)
            }
          });
        } else {
          return $('div', {
            key: key + 'html',
            dangerouslySetInnerHTML: {
              __html: node.value
            }
          });
        }
        break;
      default:
        throw node.type + ' is unsuppoted node type. report to https://github.com/mizchi/md2react/issues';
    }
  };

  module.exports = function(raw, options) {
    var ast, sanitize, _ref;
    if (options == null) {
      options = {};
    }
    sanitize = (_ref = options.sanitize) != null ? _ref : true;
    ast = mdast.parse(raw, options);
    return compile(ast, '__entry');
  };

}).call(this);
