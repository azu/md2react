// Generated by CoffeeScript 1.8.0
(function() {
  var $, compile, mdast, sanitize;

  mdast = require('mdast');

  $ = React.createElement;

  sanitize = null;

  compile = function(node, key) {
    var child, dompurify, i, tag;
    if (key == null) {
      key = '';
    }
    switch (node.type) {
      case 'root':
        return $('div', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'root' + i));
          }
          return _results;
        })());
      case 'text':
        return node.value;
      case 'strong':
        return $('strong', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'strong' + i));
          }
          return _results;
        })());
      case 'emphasis':
        return $('em', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'emphasis' + i));
          }
          return _results;
        })());
      case 'horizontalRule':
        return $('hr');
      case 'inlineCode':
        return $('code', {
          key: key
        }, [node.value]);
      case 'code':
        return $('code', {
          key: key
        }, [node.value]);
      case 'heading':
        tag = 'h' + node.depth.toString();
        return $(tag, {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, tag + i));
          }
          return _results;
        })());
      case 'paragraph':
        return $('p', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'paragraph' + i));
          }
          return _results;
        })());
      case 'list':
        tag = node.ordered ? 'ol' : 'ul';
        return $(tag, {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, tag + i));
          }
          return _results;
        })());
      case 'link':
        return $('a', {
          key: key,
          href: node.href,
          title: node.title
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'link' + i));
          }
          return _results;
        })());
      case 'image':
        return $('img', {
          key: key,
          src: node.src,
          title: node.title,
          alt: node.alt
        });
      case 'blockquote':
        return $('blockquote', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'bq' + i));
          }
          return _results;
        })());
      case 'table':
        return $('table', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, i));
          }
          return _results;
        })());
      case 'tableHeader':
        return $('tr', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push($('th', {
              key: 'tr-th'
            }, compile(child, i)));
          }
          return _results;
        })());
      case 'tableRow':
        return $('tr', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push($('td', {
              key: 'td-th'
            }, compile(child, i)));
          }
          return _results;
        })());
      case 'tableCell':
        return $('span', {
          key: key
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, i));
          }
          return _results;
        })());
      case 'listItem':
        return $('li', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
            child = _ref[i];
            _results.push(compile(child, 'li' + i));
          }
          return _results;
        })());
      case 'html':
        if ((typeof window !== "undefined" && window !== null) && sanitize) {
          dompurify = require('dompurify');
          return $('div', {
            key: key,
            dangerouslySetInnerHTML: {
              __html: dompurify.sanitize(node.value)
            }
          });
        } else {
          return $('div', {
            key: key,
            dangerouslySetInnerHTML: {
              __html: node.value
            }
          });
        }
        break;
      default:
        throw node.type(+' is unsuppoted node type. report to https://github.com/mizchi/md2react/issues');
    }
  };

  module.exports = function(raw, _sanitize) {
    var ast;
    if (_sanitize == null) {
      _sanitize = true;
    }
    sanitize = _sanitize;
    ast = mdast.parse(raw);
    return compile(ast);
  };

}).call(this);
