// Generated by CoffeeScript 1.8.0
(function() {
  var $, compile, mdast, sanitize, toChildren;

  mdast = require('mdast');

  $ = React.createElement;

  toChildren = function(node, parentKey) {
    var child, i;
    return (function() {
      var _i, _len, _ref, _results;
      _ref = node.children;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        child = _ref[i];
        _results.push(compile(child, parentKey + '_' + i));
      }
      return _results;
    })();
  };

  sanitize = null;

  compile = function(node, parentKey) {
    var className, dompurify, key, value;
    if (parentKey == null) {
      parentKey = '_start';
    }
    key = parentKey + '_' + node.type;
    switch (node.type) {
      case 'text':
        return node.value;
      case 'escape':
        return '\\';
      case 'inlineCode':
        return $('code', {
          key: key,
          className: 'inlineCode'
        }, node.value);
      case 'code':
        return $('code', {
          key: key,
          className: 'code'
        }, node.value);
      case 'break':
        return $('br', {
          key: key
        });
      case 'horizontalRule':
        return $('hr', {
          key: key
        });
      case 'image':
        return $('img', {
          key: key,
          src: node.src,
          title: node.title,
          alt: node.alt
        });
      case 'root':
        return $('div', {
          key: key
        }, toChildren(node, key));
      case 'strong':
        return $('strong', {
          key: key
        }, toChildren(node, key));
      case 'emphasis':
        return $('em', {
          key: key
        }, toChildren(node, key));
      case 'delete':
        return $('s', {
          key: key
        }, toChildren(node, key));
      case 'paragraph':
        return $('p', {
          key: key
        }, toChildren(node, key));
      case 'link':
        return $('a', {
          key: key,
          href: node.href,
          title: node.title
        }, toChildren(node, key));
      case 'heading':
        return $('h' + node.depth.toString(), {
          key: key
        }, toChildren(node, key));
      case 'list':
        return $((node.ordered ? 'ol' : 'ul'), {
          key: key
        }, toChildren(node, key));
      case 'listItem':
        className = node.checked === true ? 'checked' : node.checked === false ? 'unchecked' : '';
        return $('li', {
          key: key,
          className: className
        }, toChildren(node, key));
      case 'blockquote':
        return $('blockquote', {
          key: key
        }, toChildren(node, key));
      case 'table':
        return $('table', {
          key: key
        }, toChildren(node, key));
      case 'tableHeader':
        return $('tr', {
          key: key
        }, [
          $('th', {
            key: key + '_inner-th'
          }, toChildren(node, key))
        ]);
      case 'tableRow':
        return $('tr', {
          key: key
        }, [
          $('td', {
            key: key + '_inner-td'
          }, toChildren(node, key))
        ]);
      case 'tableCell':
        return $('span', {
          key: key
        }, toChildren(node, key));
      case 'html':
        value = (typeof document !== "undefined" && document !== null) && sanitize ? (dompurify = require('dompurify'), dompurify.sanitize(node.value)) : node.value;
        return $('div', {
          key: key
        }, [
          $('div', {
            key: key + '_raw',
            dangerouslySetInnerHTML: {
              __html: value
            }
          })
        ]);
      default:
        throw node.type + ' is unsuppoted node type. report to https://github.com/mizchi/md2react/issues';
    }
  };

  module.exports = function(raw, options) {
    var ast, _ref;
    if (options == null) {
      options = {};
    }
    sanitize = (_ref = options.sanitize) != null ? _ref : true;
    ast = mdast.parse(raw, options);
    return compile(ast);
  };

}).call(this);
