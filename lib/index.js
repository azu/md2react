// Generated by CoffeeScript 1.8.0
(function() {
  var $, compile, mdast;

  mdast = require('mdast');

  $ = React.createElement;

  compile = function(node) {
    var child, tag;
    switch (node.type) {
      case 'root':
        return $('div', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'text':
        return node.text;
      case 'strong':
        return $('strong', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'emphasis':
        return $('em', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'horizontalRule':
        return $('hr');
      case 'inlineCode':
        return $('code', {}, [node.value]);
      case 'code':
        return $('code', {}, [node.value]);
      case 'heading':
        tag = 'h' + node.depth.toString();
        return $(tag, {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'paragraph':
        return $('p', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'list':
        tag = node.ordered ? 'ol' : 'ul';
        return $(tag, {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'link':
        return $('a', {
          href: node.href,
          title: node.title
        }, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'image':
        return $('img', {
          src: node.src,
          title: node.title,
          alt: node.alt
        });
      case 'blockquote':
        return $('blockquote', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'table':
        return $('table', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'tableHeader':
        return $('tr', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push($('tr', {}, compile(child)));
          }
          return _results;
        })());
      case 'tableRow':
        return $('tr', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push($('td', {}, compile(child)));
          }
          return _results;
        })());
      case 'tableCell':
        return $('span', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'listItem':
        return $('li', {}, (function() {
          var _i, _len, _ref, _results;
          _ref = node.children;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(compile(child));
          }
          return _results;
        })());
      case 'html':
        return $('div', {
          dangerouslySetInnerHTML: {
            __html: node.value
          }
        });
      default:
        throw 'Unsuppoted node type. report to https://github.com/mizchi/md2react/issues';
    }
  };

  module.exports = function(raw) {
    var ast;
    ast = mdast.parse(raw);
    return compile(ast);
  };

}).call(this);
